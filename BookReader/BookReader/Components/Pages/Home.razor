@page "/"
@rendermode InteractiveServer
@inject HttpClient Http
@using BlazorBootstrap
@using BookReader.Components.Home
@using System.Text
@using System.Net
<PageTitle>Home</PageTitle>

@* OnFileUploaded is a parameter for the call-back function which invokes ReloadGrid method, when pdf fail is add to database*@
<div class="content mt-1 mb-1">
    <Upload OnFileUploaded="ReloadGrid" />
</div>

<Modal @ref="modal" title="Modal title" IsVerticallyCentered="true" IsScrollable="true" Size="ModalSize.ExtraLarge">
    <BodyTemplate>
        <iframe src="@bookContent" style="width: 100%; height: 800px;" frameborder="0"></iframe>
    </BodyTemplate>
    <FooterTemplate>
        <Button Color="ButtonColor.Secondary" Outline="true" @onclick="OnHideModalClick">Close</Button>
    </FooterTemplate>
</Modal>

<Grid @ref="grid"
      TItem="BookDetails"
      Class="table table-hover table-bordered table-striped"
      DataProvider="BookDetailsDataProvider"
      AllowFiltering="true"
      Responsive="true"
      AllowPaging="true"
      PageSize="4"
      Style=" border-block-color:aqua">
      <GridColumn TItem="BookDetails" HeaderText="Image">
          <Image ImageBytes="@context.Picture" />
      </GridColumn>

    <GridColumn TItem="BookDetails" HeaderText="Id" PropertyName="Id">
        @context.BookId
    </GridColumn>
    <GridColumn TItem="BookDetails" HeaderText="Title" PropertyName="Title">
        @context.Title
    </GridColumn>
    <GridColumn TItem="BookDetails" HeaderText="Pages" PropertyName="Pages">
        @context.Pages
    </GridColumn>
    <GridColumn TItem="BookDetails" HeaderText="Author" PropertyName="Author">
        @context.Author
    </GridColumn>
    <GridColumn TItem="BookDetails" HeaderText="Content">
        <Button Color="ButtonColor.Info" Outline="true" @onclick="async () => await OnClickOpenContent(context.BookId)">Read Content</Button>
    </GridColumn>
    <ConfirmDialog @ref="dialog" />

    <GridColumn TItem="BookDetails" HeaderText="">
        <Button Color="ButtonColor.Danger" Outline="true" @onclick="async () => await OnClickRemoveBook(context.BookId)">Remove Book</Button>
    </GridColumn>
</Grid>

@code {
    BlazorBootstrap.Grid<BookDetails> grid = default!;
    private List<BookDetails> bookDetails = default!;
    private Modal modal;

    private ConfirmDialog dialog = default!;
    [Inject] ToastService ToastService { get; set; } = default!;

    private string bookContent;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
    }

    private async Task<GridDataProviderResult<BookDetails>> BookDetailsDataProvider(GridDataProviderRequest<BookDetails> request)
    {
        if (bookDetails is null)
            bookDetails = await GetBookDetails();

        return await Task.FromResult(request.ApplyTo(bookDetails));
    }

    private async Task<List<BookDetails>> GetBookDetails()
    {
        return await Http.GetFromJsonAsync<List<BookDetails>>("all-details");
    }

    private async Task OnClickOpenContent(int bookId)
    {
        BookContent response = await Http.GetFromJsonAsync<BookContent>($"content/{bookId}");

        if (response != null)
        {
            bookContent = "data:application/pdf;base64," + Convert.ToBase64String(response.Content);
            Task.Delay(500);
            await modal?.ShowAsync();
        }
    }

    private async Task OnClickRemoveBook(int bookId)
    {
        var parameters = new Dictionary<string, object>();
        parameters.Add("BookId", bookId);

        bool confirmation = await dialog.ShowAsync<Delete>("Are you sure you want to delete this book?", parameters);

        if (confirmation)
        {
            HttpResponseMessage response = await Http.DeleteAsync($"delete/{bookId}");
            if (response.StatusCode == HttpStatusCode.NoContent)
            {
                ToastService.Notify(new ToastMessage(ToastType.Success, $"Book deleted successfully."));
                await ReloadGrid();
            }
        }
        else
            ToastService.Notify(new ToastMessage(ToastType.Secondary, $"Delete action canceled."));

    }

    private async Task ReloadGrid()
    {
        bookDetails = null;
        await grid.RefreshDataAsync();
    }

    private async Task OnHideModalClick()
    {
        await modal?.HideAsync();
    }
}